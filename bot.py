import telebot
from telebot import types
import logging
from datetime import datetime

BOT_API = 'YOU_BOT_API'

bot = telebot.TeleBot(BOT_API)
telebot.logger.setLevel(logging.INFO)

storage = dict()

def write_to_file(student_names, date, pair_info):
    with open("–ø—Ä–æ–≥—É–ª—å—â–∏–∫–∏.txt", "a", encoding="utf-8") as file:
        for student_name in student_names:
            file.write(f"{student_name} - {date} - {pair_info}\n")

def read_from_file():
    try:
        with open("–ø—Ä–æ–≥—É–ª—å—â–∏–∫–∏.txt", "r", encoding="utf-8") as file:
            return file.readlines()
    except FileNotFoundError:
        return []

def filter_by_month(entries):
    current_month = datetime.now().strftime("%m.%Y")
    return [entry for entry in entries if current_month in entry]

def filter_by_day(entries, date):
    return [entry for entry in entries if date in entry]

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
    btn2 = types.KeyboardButton('üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–æ–≤')
    btn3 = types.KeyboardButton('üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫')
    markup.add(btn1, btn2, btn3)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç, —Å—Ç–∞—Ä–æ—Å—Ç–∞! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç –ø—Ä–æ–≥—É–ª—å—â–∏–∫–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üìú –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–æ–≤')
def send_list(message):
    entries = read_from_file()
    monthly_entries = filter_by_month(entries)
    if monthly_entries:
        bot.send_message(message.chat.id, f"üìÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n{''.join(monthly_entries)}")
    else:
        bot.send_message(message.chat.id, "‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—É—Å—Ç.")

@bot.message_handler(func=lambda message: message.text == 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫')
def clear_list(message):
    bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    bot.register_next_step_handler(message, handle_clear_date)

def handle_clear_date(message):
    date = message.text
    try:
        datetime.strptime(date, "%d.%m.%Y")   
        entries = read_from_file()
        remaining_entries = [entry for entry in entries if date not in entry]
        with open("–ø—Ä–æ–≥—É–ª—å—â–∏–∫–∏.txt", "w", encoding="utf-8") as file:
            file.writelines(remaining_entries)
        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–ø–∏—Å–∏ –∑–∞ {date} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")

@bot.message_handler(func=lambda message: message.text == 'üìã –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
def handle_students(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    students = [
        '–ë–µ–ª–æ—É—Å–æ–≤ –°–µ—Ä–≥–µ–π', '–í–µ—Ä—à–∏–Ω–∏–Ω –ù–∏–∫–∏—Ç–∞', '–ì–æ—Ä—à–µ–Ω–∏–Ω–∞ –û–ª–µ—Å—è', '–î–µ–≤—è—Ç–æ–≤ –ù–∏–∫–æ–ª–∞–π',
        '–î–æ–º–Ω–∏–Ω –î–º–∏—Ç—Ä–∏–π', '–ñ–∏–≥–∞–ª–æ–≤ –î–∞–Ω–∏–ª', '–ó–∞–≥—Ä–µ–±–∏–Ω–∞ –°–æ—Ñ—å—è', '–ó–∞–π–∫–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        '–ó–æ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ö–µ–ª—å–º–∞–∫–æ–≤ –°–µ—Ä–≥–µ–π', '–ö–æ—Ä–µ–ø–∞–Ω–æ–≤ –ò–≤–∞–Ω', '–ö–æ—á–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
        '–ö—É–∑—å–º–∏–Ω –ò–≤–∞–Ω', '–ù–∞–≥–æ–≤–∏—Ü—ã–Ω –Ø–Ω', '–ü–µ—Ç—Ä–æ–≤ –†–æ–º–∞–Ω', '–ü—Ä–æ–Ω–∏–Ω –î–∞–Ω–∏–ª',
        '–°–æ–ª–æ–≤—å–µ–≤–∞ –¢–∞—Ç—å—è–Ω–∞', '–°–æ–ª–æ–≤—å–µ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–¢–∏—Ö–æ–Ω–æ–≤ –ï–≥–æ—Ä', '–¢—Ä–æ–Ω–∏–Ω –ò–ª—å—è',
        '–ß—É—Ç–æ–≤ –ö–∏—Ä–∏–ª–ª', '–®—É–≤–∞–ª–æ–≤ –ê–Ω–¥—Ä–µ–π'
    ]
    buttons = [types.InlineKeyboardButton(student, callback_data=student) for student in students]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton('‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data='–ì–æ—Ç–æ–≤–æ'))
    bot.send_message(message.chat.id, "üë• –í—ã–±–µ—Ä–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    user_id = call.from_user.id
    if user_id not in storage:
        storage[user_id] = {'students': []}
    
    student_name = call.data
    if student_name == '–ì–æ—Ç–æ–≤–æ':
        if storage[user_id]['students']:
            bot.send_message(call.message.chat.id, f"üìù –í—ã –≤—ã–±—Ä–∞–ª–∏:\n{', '.join(storage[user_id]['students'])}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            bot.register_next_step_handler(call.message, handle_date)
        else:
            bot.send_message(call.message.chat.id, "‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞.")
    else:
        storage[user_id]['students'].append(student_name)   
        bot.answer_callback_query(call.id, f"‚úÖ {student_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

def handle_date(message):
    user_id = message.from_user.id
    student_data = storage.get(user_id)
    if student_data:
        date = message.text
        try:
            datetime.strptime(date, "%d.%m.%Y")  
            student_data['date'] = date
            bot.send_message(message.chat.id, "üìö –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –ø–∞—Ä—ã:")
            bot.register_next_step_handler(message, handle_pair_info)
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")
            bot.register_next_step_handler(message, handle_date)   

def handle_pair_info(message):
    user_id = message.from_user.id
    student_data = storage.get(user_id)
    if student_data:
        student_names = student_data['students']
        date = student_data['date']
        pair_info = message.text
        if pair_info.strip():   
            write_to_file(student_names, date, pair_info)
            del storage[user_id]  
            bot.send_message(
                message.chat.id,
                f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç—ã {', '.join(student_names)} –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª—å—â–∏–∫–æ–≤.\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üìö –ü—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –ø–∞—Ä–∞: {pair_info}"
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, handle_pair_info)  

@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.send_message(message.chat.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")

bot.polling()
